#ifndef DISPLAY_H
#define DISPLAY_H

#include "GFX4dIoD9.h"

#include "fonts.h"
extern GFX4dIoD9 gfx;

uint8_t OSRRlogo [] = {
  80,160,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xfe, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 
  0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x3f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 
  0x7f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x3f, 0xe0, 0x01, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x7f, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x3f, 0xc0, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x0f, 0xf8, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 
  0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xf8, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x03, 
  0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x0f, 0xff, 0xc0, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x70, 0x00, 0x07, 0xff, 0xf8, 0x0f, 0xfc, 0x00, 
  0x00, 0x01, 0xfe, 0x00, 0x07, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x01, 0xff, 0x80, 0x03, 0xff, 
  0xff, 0xff, 0xfc, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x03, 
  0xff, 0xe0, 0x00, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 0x7f, 0xff, 0xff, 
  0xfc, 0x00, 0x00, 0x03, 0xef, 0xf0, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0x81, 0xf8, 
  0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0x80, 0xf8, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x00, 
  0x00, 0x03, 0xc0, 0x78, 0x00, 0x03, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x03, 0xc0, 0x38, 0x00, 0x00, 
  0xff, 0xff, 0xe0, 0x00, 0x00, 0x03, 0xf0, 0x38, 0x00, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0x00, 0x01, 
  0xfe, 0x78, 0x00, 0x78, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x01, 0xff, 0xf8, 0x03, 0xfe, 0x00, 0xfc, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xf8, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf8, 
  0x0f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0x0f, 0xf0, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe3, 0xc0, 0x3f, 0xfe, 
  0x01, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x3f, 0xfe, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x03, 
  0xff, 0x80, 0x3f, 0xfe, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x3f, 0xfe, 0x1f, 0xff, 
  0x00, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x3f, 0xfe, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x00, 0xff, 0xf8, 
  0x3f, 0xfe, 0x3f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x3f, 0xf2, 0x3f, 0xff, 0xe0, 0x00, 
  0x00, 0x00, 0x1f, 0xf8, 0x3f, 0xc0, 0x7f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0xff, 0xf8, 0x3f, 0x80, 
  0x7f, 0xff, 0xf0, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x3f, 0x80, 0x7f, 0xff, 0xf8, 0x00, 0x00, 0x03, 
  0xff, 0xe0, 0x3f, 0x80, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xff, 0x80, 0x3f, 0x80, 0xff, 0xff, 
  0xf8, 0x00, 0x00, 0x03, 0xff, 0x00, 0x3f, 0xc0, 0xff, 0xf7, 0xfc, 0x00, 0x00, 0x03, 0xff, 0xe0, 
  0x3f, 0xc0, 0xff, 0xe3, 0xfc, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x3f, 0xe1, 0xff, 0xe1, 0xfc, 0x00, 
  0x00, 0x01, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xc1, 0xfc, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x1f, 0xff, 
  0xff, 0xc1, 0xfc, 0x00, 0x00, 0x03, 0x07, 0xf8, 0x1f, 0xff, 0xff, 0xc1, 0xfc, 0x00, 0x00, 0x03, 
  0xe0, 0xf8, 0x0f, 0xff, 0xff, 0xc1, 0xfc, 0x00, 0x00, 0x03, 0xfc, 0x18, 0x0f, 0xff, 0xff, 0x97, 
  0xfc, 0x00, 0x00, 0x03, 0xff, 0x80, 0x07, 0xff, 0xff, 0x9f, 0xfc, 0x00, 0x00, 0x03, 0xff, 0xf0, 
  0x03, 0xff, 0xff, 0x9f, 0xfc, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x01, 0xff, 0xff, 0x1f, 0xfc, 0x00, 
  0x00, 0x03, 0xff, 0xf8, 0x00, 0xff, 0xff, 0x1f, 0xfc, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x7f, 
  0xfe, 0x1f, 0xfc, 0x00, 0x00, 0x03, 0xc7, 0xf8, 0x00, 0x3f, 0xfe, 0x1f, 0xfc, 0x00, 0x00, 0x03, 
  0xc0, 0xf8, 0x00, 0x1f, 0xfc, 0x1f, 0xf8, 0x00, 0x00, 0x03, 0xc0, 0x18, 0x00, 0x03, 0xf0, 0x1f, 
  0xf8, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x18, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x03, 0xc0, 0x00, 
  0x1f, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x1f, 0xe0, 0x00, 0x1f, 0xe0, 0x00, 
  0x00, 0x03, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x1f, 0xff, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x1f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x03, 
  0xff, 0x80, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0x80, 
  0x00, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf8, 
  0x1f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x00, 
  0x00, 0x03, 0x07, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xe0, 0xf8, 0x07, 0xff, 
  0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xfc, 0x18, 0x01, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 
  0xff, 0x80, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x00, 0x07, 0xff, 0xff, 
  0xf8, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0xff, 0xf8, 
  0x00, 0x01, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x01, 0xff, 0xff, 0xf8, 0x00, 
  0x00, 0x00, 0x1f, 0xf8, 0x00, 0x1f, 0xff, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0xff, 0xf8, 0x01, 0xff, 
  0xff, 0x0f, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0x07, 0xf8, 0x00, 0x00, 0x03, 
  0xff, 0xe0, 0x1f, 0xff, 0xff, 0x07, 0xf8, 0x00, 0x00, 0x03, 0xff, 0x80, 0x1f, 0xff, 0xff, 0x07, 
  0xf8, 0x00, 0x00, 0x03, 0xff, 0x00, 0x1f, 0xff, 0xff, 0x87, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xe0, 
  0x1f, 0xff, 0xff, 0x87, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0x87, 0xf8, 0x00, 
  0x00, 0x01, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xcf, 0xf8, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x1f, 0xff, 
  0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0x07, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 
  0xe0, 0xf8, 0x1f, 0xff, 0xbf, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xfc, 0x18, 0x1f, 0xff, 0x3f, 0xff, 
  0xf8, 0x00, 0x00, 0x03, 0xff, 0x80, 0x1f, 0xfc, 0x3f, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xf0, 
  0x1f, 0xc0, 0x1f, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x18, 0x00, 0x0f, 0xff, 0xf8, 0x00, 
  0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x00, 0x03, 0x9f, 0xf8, 0x00, 0x00, 
  0x07, 0xff, 0xf8, 0x00, 0x00, 0x03, 0x8f, 0xf8, 0x18, 0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x03, 
  0x8e, 0xf8, 0x1f, 0x00, 0x01, 0xff, 0xf0, 0x00, 0x00, 0x03, 0x8e, 0x38, 0x1f, 0xe0, 0x00, 0x7f, 
  0xe0, 0x00, 0x00, 0x03, 0x8e, 0x38, 0x1f, 0xfc, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x03, 0x8e, 0x38, 
  0x1f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8e, 0x38, 0x1f, 0xff, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x8e, 0x38, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x38, 0x1f, 0xff, 
  0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x38, 0x1f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x1f, 0xff, 0xff, 0xff, 
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xf8, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
  0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xff, 0xff, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x07, 0xf8, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 
  0xff, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x87, 0xf8, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xff, 0xff, 0x87, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x87, 
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xcf, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x1f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xf8, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xbf, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 
  0x3f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x3f, 0xff, 0xf8, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xc0, 0x1f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x0f, 0xff, 
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

int16_t RGBtoColor(uint8_t R, uint8_t G, uint8_t B){ //turn 3 8bit RGB values into a 16 bit "565" colour
//  R = (R >> 3) & 0x001f;      //convert red value to 5 bits
//  G = (G >> 2) & 0x003f;      //convert green value to 6 bits
//  B = (B >> 3) & 0x001f;      //convert blue value to 5 bits
//  return( R<<11 | G<<5 | B ); //combine in corect order for display
  return ( ((R & 0xF8) << 8) | ((G & 0xFC) << 3) | (B >> 3) );
}

uint8_t getRedFromColor(uint16_t color){
  return ((color >> 11) & 0x1F);
}

uint8_t getGreenFromColor(uint16_t color){
  return ((color >> 5) & 0x3F);
}

uint8_t getBlueFromColor(uint16_t color){
  return (color & 0x1F);
}

int16_t mapColor(uint8_t x, uint8_t in_min, uint8_t in_max , uint16_t color0, uint16_t color1){ //turn 3 8bit RGB values into a 16 bit "565" colour
  uint8_t R = map( x, in_min, in_max, getRedFromColor(color0), getRedFromColor(color1));
  uint8_t G = map( x, in_min, in_max, getGreenFromColor(color0), getGreenFromColor(color1));
  uint8_t B = map( x, in_min, in_max, getBlueFromColor(color0), getBlueFromColor(color1));
  return( R<<11 | G<<5 | B ); //combine in corect order for display
}

//a function to display a 2 colour picture stored as a uint8_t array
void pictureGRAM(uint8_t data[], uint8_t xPos, uint8_t yPos, uint16_t color, uint16_t bgcolor) {
  
  uint8_t width = data[0];              //width of image is first value in array
  uint8_t height = data[1];             //height of image is second value in array
  
  int numberOfBytes = width*height / 8; // number of bytes of data
  
  gfx.setGRAM(xPos,yPos, xPos+width-1, yPos+height-1); //set display are to write to
  
  for(int i = 0; i < numberOfBytes; i++){   //for each byte in the array
    for(int j = 0; j < 8; j++){             //check each bit
      int test2 = (data[i+2]>>(7-j)) & 0x1; //test if bit is set and set color acordingley
      int16_t pix1 = bgcolor;               
      if(test2 == 1) pix1 = color;    
      gfx.WrGRAM16(pix1);                   //send this pixel to the display
    }
  }
}

void displayPutChar(const uint8_t *font, uint8_t x, uint8_t y, char c, uint16_t color, uint16_t bgcolor) {
  if (c == '\0') {
    return;
  }

  c -= ' ';                         //remove first 32 no text ASCII characters

  uint8_t w = font[0];              //width of charater is first value in array
  uint8_t h = font[1];              //height of charater is second value in array
  
  int bytes_per_char = (w * h) / 2; // 2 x 4 bit pixels per byte
  if ((w * h) % 2 != 0) {           //if font size has odd number of pixels per charater, make sure we round up to nearest full byte
    bytes_per_char++;
  }
  
  int charIndex = 2;                        //skip width and height bytes
  charIndex += c*bytes_per_char;         //skip to location in array for required character

  gfx.setGRAM(x,y, x+w-1, y+h-1);   //set display are to write to

  for (int i = 0; i < bytes_per_char ; i++) { //for each byte in character
//    uint8_t nibble0 = font[charIndex+i] & 0xF0;       // color for first pixel
//    uint8_t nibble1 = font[charIndex+i]<<4 & 0xF0;    // Color for second pixel
    
    //uint16_t pixel0 = RGBtoColor( nibble0, nibble0, nibble0);
    //uint16_t pixel1 = RGBtoColor( nibble1, nibble1, nibble1);
    
    uint8_t nibble0 = font[charIndex+i]>>4 & 0x0F;       // color for first pixel
    uint8_t nibble1 = font[charIndex+i] & 0x0F;    // Color for second pixel
    uint16_t pixel0 = mapColor(nibble0, 0, 15, bgcolor, color);
    uint16_t pixel1 = mapColor(nibble1, 0, 15, bgcolor, color);
    gfx.WrGRAM(pixel1<< 16 |pixel0);
  }
}


void bootlogo() {
  pictureGRAM(OSRRlogo, 0,0, RGBtoColor(255,255,255), BLACK);
  delay(1000);
}


#endif
