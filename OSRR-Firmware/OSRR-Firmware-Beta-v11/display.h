#ifndef DISPLAY_H
#define DISPLAY_H

#include "GFX4dIoD9.h"

extern GFX4dIoD9 gfx;

uint8_t OSRRlogo [] = {
  80,160,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xff, 0xf0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xf8, 0x03, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xff, 0xfc, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfc, 
  0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfd, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xf8, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xe1, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe1, 0xff, 0xff, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xe1, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0xff, 
  0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0xe0, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0xff, 0xff, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfe, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xe0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
  0xff, 0xff, 0xff, 0xf8, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf8, 0x1c, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0xff, 0xf8, 0x1c, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xf8, 0x1c, 0x71, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x1c, 0x71, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf8, 
  0x1c, 0x71, 0xc0, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x3f, 0xf8, 0x1c, 0x71, 0xc0, 0x00, 0x00, 0x07, 
  0xfe, 0x00, 0x07, 0xf8, 0x1c, 0x71, 0xc0, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0xf8, 0x1f, 0x71, 
  0xc0, 0x00, 0x00, 0x0f, 0xff, 0xc0, 0x00, 0x18, 0x1f, 0xf1, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xe0, 
  0x00, 0x00, 0x1f, 0xf9, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x00, 
  0x00, 0x1f, 0xff, 0xf0, 0x00, 0x18, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xf8, 0x03, 0xf8, 
  0x0f, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xfc, 0x3f, 0xf8, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x1f, 
  0xff, 0xfc, 0xff, 0xf8, 0x18, 0x3f, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xfd, 0xff, 0xf8, 0x1f, 0x07, 
  0xc0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xe0, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xff, 
  0xff, 0xf8, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0x80, 0x00, 
  0x00, 0x1f, 0xe1, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0xe1, 0xff, 0xff, 0xf8, 
  0x07, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0xe1, 0xff, 0xff, 0xf8, 0x00, 0xff, 0xc0, 0x00, 0x00, 0x1f, 
  0xe0, 0xff, 0xff, 0xf8, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0xe0, 0xff, 0xff, 0xf8, 0x07, 0xff, 
  0xc0, 0x00, 0x00, 0x1f, 0xe0, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0xf0, 0xff, 
  0xff, 0x80, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x1f, 0xfe, 0xff, 0xf8, 0x00, 0x1f, 0xf8, 0x00, 0x00, 
  0x00, 0x1f, 0xff, 0xff, 0x80, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x80, 0x00, 
  0x1f, 0xff, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x1f, 
  0xff, 0xff, 0xe0, 0x00, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x01, 0xff, 
  0xc0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x80, 0x18, 0x3f, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xff, 
  0xff, 0xe0, 0x1f, 0x07, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xe0, 0xc0, 0x00, 
  0x00, 0x03, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf8, 
  0x1f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 
  0x01, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xf8, 0x01, 0xff, 
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0xff, 0xf8, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0xc0, 0x00, 
  0x00, 0x07, 0xf8, 0x00, 0x07, 0xf8, 0x00, 0x03, 0x80, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0xf8, 
  0x00, 0x03, 0xc0, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x18, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x1f, 
  0xf8, 0x0f, 0xc0, 0x00, 0x18, 0x03, 0xc0, 0x00, 0x00, 0x1f, 0xf8, 0x3f, 0xf8, 0x00, 0x1f, 0x03, 
  0xc0, 0x00, 0x00, 0x3f, 0xf8, 0x7f, 0xfc, 0x00, 0x1f, 0xe3, 0xc0, 0x00, 0x00, 0x3f, 0xf8, 0x7f, 
  0xfe, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x3f, 0xf8, 0xff, 0xff, 0x00, 0x1f, 0xff, 0xc0, 0x00, 
  0x00, 0x3f, 0xf8, 0xff, 0xff, 0x80, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x3f, 0xf9, 0xff, 0xff, 0xc0, 
  0x0f, 0xff, 0xc0, 0x00, 0x00, 0x3f, 0xf9, 0xff, 0xff, 0xe0, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x3f, 
  0xe9, 0xff, 0xff, 0xf0, 0x18, 0x3f, 0xc0, 0x00, 0x00, 0x3f, 0x83, 0xff, 0xff, 0xf0, 0x1f, 0x07, 
  0xc0, 0x00, 0x00, 0x3f, 0x83, 0xff, 0xff, 0xf8, 0x1f, 0xe0, 0xc0, 0x00, 0x00, 0x3f, 0x83, 0xff, 
  0xff, 0xf8, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x3f, 0x83, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0x80, 0x00, 
  0x00, 0x3f, 0x87, 0xff, 0x87, 0xfc, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x3f, 0xc7, 0xff, 0x03, 0xfc, 
  0x07, 0xff, 0xc0, 0x00, 0x00, 0x3f, 0xef, 0xff, 0x03, 0xfc, 0x00, 0xff, 0xc0, 0x00, 0x00, 0x1f, 
  0xff, 0xff, 0x01, 0xfc, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x01, 0xfc, 0x07, 0xff, 
  0xc0, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x01, 0xfc, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x0f, 0xff, 0xfe, 
  0x01, 0xfc, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfe, 0x03, 0xfc, 0x1f, 0xf8, 0x00, 0x00, 
  0x00, 0x07, 0xff, 0xfc, 0x4f, 0xfc, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x7f, 0xfc, 
  0x1f, 0xff, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf8, 0x7f, 0xfc, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 
  0xff, 0xf8, 0x7f, 0xfc, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x7f, 0xfc, 0x01, 0xff, 
  0xc0, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x7f, 0xfc, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x07, 0x80, 
  0x7f, 0xfc, 0x03, 0xc7, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0x0f, 0xf0, 0xc0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 
  0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x3f, 0x00, 0x7f, 0xc0, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x01, 0xff, 0xf0, 0x1e, 0x00, 0x1e, 0x7f, 
  0x80, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x1c, 0x0f, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xff, 
  0x00, 0x00, 0x1c, 0x03, 0xc0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xc0, 0x00, 0x1e, 0x03, 0xc0, 0x00, 
  0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0x01, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 
  0x1f, 0x81, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x0f, 0xf7, 0xc0, 0x00, 0x00, 0x3f, 
  0xff, 0xff, 0xfe, 0x00, 0x0f, 0xff, 0xc0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x07, 0xff, 
  0xc0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x80, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x3f, 0xff, 0xff, 
  0xff, 0xc0, 0x01, 0xff, 0x80, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x80, 0x00, 
  0x00, 0x3f, 0xf0, 0x1f, 0xff, 0xe0, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x03, 0xff, 0xf0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 
  0xc0, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x1f, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 
  0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0xf0, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x03, 0xfc, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0xfe, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x07, 0xfc, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xfe, 
  0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xfc, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x7f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x7f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

int16_t RGBtoColor(uint8_t R, uint8_t G, uint8_t B){ //turn 3 8bit RGB values into a 16 bit "565" colour
  R = (R >> 3) & 0x001f;      //convert red value to 5 bits
  G = (G >> 2) & 0x003f;      //convert green value to 6 bits
  B = (B >> 3) & 0x001f;      //convert blue value to 5 bits
  return( R<<11 | G<<5 | B ); //combine in corect order for display
}

//a function to display a 2 colour picture stored as a uint8_t array
void pictureGRAM(uint8_t data[], uint8_t xPos, uint8_t yPos, uint16_t color, uint16_t bgcolor) {
  
  uint8_t width = data[0];              //width of image is first value in array
  uint8_t height = data[1];             //height of image is second value in array
  
  int numberOfBytes = width*height / 8; // number of bytes of data
  
  gfx.setGRAM(xPos,yPos, xPos+width-1, yPos+height-1); //set display are to write to
  
  for(int i = 0; i < numberOfBytes; i++){   //for each byte in the array
    for(int j = 0; j < 8; j++){             //check each bit
      int test2 = (data[i+2]>>(7-j)) & 0x1; //test if bit is set and set color acordingley
      int16_t pix1 = bgcolor;               
      if(test2 == 1) pix1 = color;    
      gfx.WrGRAM16(pix1);                   //send this pixel to the display
    }
  }
}

void bootlogo() {
  pictureGRAM(OSRRlogo, 0,0, RGBtoColor(255,255,255), BLACK);
  delay(1000);
}


#endif
